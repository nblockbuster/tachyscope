@binding(2) @group(0) var outputTexture_0 : texture_storage_2d<rgba8unorm, write>;

struct GlobalParams_std140_0
{
    @align(16) time_0 : f32,
};

@binding(0) @group(0) var<uniform> globalParams_0 : GlobalParams_std140_0;
fn imageMain_0( dispatchThreadID_0 : vec2<u32>,  screenSize_0 : vec2<i32>) -> vec4<f32>
{
    var v1_0 : vec2<f32> = (vec2<f32>(dispatchThreadID_0.xy) * vec2<f32>(2.0f) - vec2<f32>(screenSize_0.xy)) / vec2<f32>(f32(screenSize_0.y));
    const _S1 : vec4<f32> = vec4<f32>(5.0f, 5.0f, 0.0f, 0.0f);
    const _S2 : vec4<f32> = vec4<f32>(9.0f, 9.0f, 0.0f, 0.0f);
    const _S3 : vec4<f32> = vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f);
    const _S4 : vec4<f32> = vec4<f32>(0.20000000298023224f, 0.0f, 0.0f, 0.0f);
    const _S5 : vec4<f32> = vec4<f32>(0.00999999977648258f, 0.0f, 0.0f, 0.0f);
    const _S6 : vec4<f32> = vec4<f32>(251.0f, 0.0f, 0.0f, 0.0f);
    const _S7 : vec4<f32> = vec4<f32>(7.0f, 0.0f, 0.0f, 0.0f);
    const _S8 : vec4<f32> = vec4<f32>(15.0f, 0.0f, 0.0f, 0.0f);
    const _S9 : vec4<f32> = vec4<f32>(0.11287626624107361f, 0.04161480069160461f, 0.15684613585472107f, 1.0f);
    const _S10 : vec4<f32> = vec4<f32>(0.0277765691280365f, 0.00650441646575928f, 0.0370078831911087f, 1.0f);
    const _S11 : vec4<f32> = vec4<f32>(0.03543071821331978f, 0.00757433334365487f, 0.03905515745282173f, 1.0f);
    const _S12 : vec4<f32> = vec4<f32>(0.09883967787027359f, 0.03310476243495941f, 0.12477181851863861f, 1.0f);
    const _S13 : vec4<f32> = vec4<f32>(0.11462580412626266f, 0.07109033316373825f, 0.12141270190477371f, 1.0f);
    const _S14 : vec4<f32> = vec4<f32>(0.25f, 0.0f, 0.0f, 0.0f);
    const _S15 : vec4<f32> = vec4<f32>(0.5f, 0.0f, 0.0f, 0.0f);
    const _S16 : vec4<f32> = vec4<f32>(0.75f, 0.0f, 0.0f, 0.0f);
    const _S17 : vec4<f32> = vec4<f32>(0.0f, 4.0f, 0.0f, 0.0f);
    const _S18 : vec4<f32> = vec4<f32>(0.25f, 4.0f, 0.0f, 0.0f);
    const _S19 : vec4<f32> = vec4<f32>(0.5f, 4.0f, 0.0f, 0.0f);
    const _S20 : vec4<f32> = vec4<f32>(0.75f, 4.0f, 0.0f, 0.0f);
    const _S21 : vec4<f32> = vec4<f32>(1.0f, 1.0f, 1.0f, 0.0f);
    const _S22 : vec4<f32> = vec4<f32>(1.0f, 0.0f, 0.0f, 0.0f);
    const _S23 : vec4<f32> = vec4<f32>(42.0f, 0.0f, 0.0f, 0.0f);
    const _S24 : vec4<f32> = vec4<f32>(0.00009999999747379f, 0.0f, 0.0f, 0.0f);
    const _S25 : vec4<f32> = vec4<f32>(1.25f, 0.0f, 0.0f, 0.0f);
    const _S26 : vec4<f32> = vec4<f32>(101.0f, 0.0f, 0.0f, 0.0f);
    const _S27 : vec4<f32> = vec4<f32>(0.00999999977648258f, 0.18999999761581421f, 0.0f, 0.0f);
    const _S28 : vec4<f32> = vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f);
    const _S29 : vec4<f32> = vec4<f32>(0.05000000074505806f, 0.20000000298023224f, 0.0f, 0.0f);
    const _S30 : vec4<f32> = vec4<f32>(1.0f, 1.0f, 1.0f, 0.89999997615814209f);
    var cb0_0 : array<vec4<f32>, i32(74)>;
    cb0_0[i32(0)] = vec4<f32>(3.0f, 0.0f, 0.0f, 0.0f);
    cb0_0[i32(1)] = _S1;
    cb0_0[i32(2)] = _S2;
    cb0_0[i32(3)] = _S3;
    cb0_0[i32(4)] = _S4;
    cb0_0[i32(5)] = _S3;
    cb0_0[i32(6)] = _S3;
    cb0_0[i32(7)] = _S3;
    cb0_0[i32(8)] = _S3;
    cb0_0[i32(9)] = _S3;
    cb0_0[i32(10)] = _S3;
    cb0_0[i32(11)] = _S3;
    cb0_0[i32(12)] = _S3;
    cb0_0[i32(13)] = _S3;
    cb0_0[i32(14)] = _S4;
    cb0_0[i32(15)] = _S5;
    cb0_0[i32(16)] = _S6;
    cb0_0[i32(17)] = _S7;
    cb0_0[i32(18)] = _S8;
    cb0_0[i32(19)] = _S9;
    cb0_0[i32(20)] = _S10;
    cb0_0[i32(21)] = _S11;
    cb0_0[i32(22)] = _S12;
    cb0_0[i32(23)] = _S13;
    cb0_0[i32(24)] = _S3;
    cb0_0[i32(25)] = _S14;
    cb0_0[i32(26)] = _S15;
    cb0_0[i32(27)] = _S16;
    cb0_0[i32(28)] = _S3;
    cb0_0[i32(29)] = _S17;
    cb0_0[i32(30)] = _S18;
    cb0_0[i32(31)] = _S19;
    cb0_0[i32(32)] = _S20;
    cb0_0[i32(33)] = _S3;
    cb0_0[i32(34)] = _S14;
    cb0_0[i32(35)] = _S15;
    cb0_0[i32(36)] = _S16;
    cb0_0[i32(37)] = _S3;
    cb0_0[i32(38)] = _S17;
    cb0_0[i32(39)] = _S18;
    cb0_0[i32(40)] = _S19;
    cb0_0[i32(41)] = _S20;
    cb0_0[i32(42)] = _S3;
    cb0_0[i32(43)] = _S14;
    cb0_0[i32(44)] = _S15;
    cb0_0[i32(45)] = _S16;
    cb0_0[i32(46)] = _S3;
    cb0_0[i32(47)] = _S17;
    cb0_0[i32(48)] = _S18;
    cb0_0[i32(49)] = _S19;
    cb0_0[i32(50)] = _S20;
    cb0_0[i32(51)] = _S3;
    cb0_0[i32(52)] = _S14;
    cb0_0[i32(53)] = _S15;
    cb0_0[i32(54)] = _S16;
    cb0_0[i32(55)] = _S3;
    cb0_0[i32(56)] = _S17;
    cb0_0[i32(57)] = _S18;
    cb0_0[i32(58)] = _S19;
    cb0_0[i32(59)] = _S20;
    cb0_0[i32(60)] = _S21;
    cb0_0[i32(61)] = _S22;
    cb0_0[i32(62)] = _S23;
    cb0_0[i32(63)] = _S24;
    cb0_0[i32(64)] = _S25;
    cb0_0[i32(65)] = _S26;
    cb0_0[i32(66)] = _S27;
    cb0_0[i32(67)] = _S28;
    cb0_0[i32(68)] = _S29;
    cb0_0[i32(69)] = _S3;
    cb0_0[i32(70)] = _S3;
    cb0_0[i32(71)] = _S3;
    cb0_0[i32(72)] = _S3;
    cb0_0[i32(73)] = _S30;
    const _S31 : vec4<f32> = vec4<f32>(94.0f, 72.0f, 0.0f, 0.0f);
    cb0_0[i32(10)] = _S31;
    cb0_0[i32(6)] = _S31;
    cb0_0[i32(13)] = vec4<f32>(globalParams_0.time_0);
    cb0_0[i32(69)] = vec4<f32>(0.30588001012802124f, 0.20000000298023224f, 0.38824000954627991f, 1.0f);
    var r1_0 : vec4<f32>;
    var r2_0 : vec4<f32>;
    var r3_0 : vec4<f32>;
    var r4_0 : vec4<f32>;
    var r5_0 : vec4<f32>;
    var r6_0 : vec4<f32>;
    var r7_0 : vec4<f32>;
    var r8_0 : vec4<f32>;
    var r9_0 : vec4<f32>;
    var r10_0 : vec4<f32>;
    var r11_0 : vec4<f32>;
    var r12_0 : vec4<f32>;
    var r0_0 : vec4<f32>;
    r0_0[i32(0)] = cb0_0[i32(10)].y + cb0_0[i32(6)].x;
    r0_0[i32(1)] = f32(- i32((cb0_0[i32(62)].x) >= 0.0f));
    var _S32 : f32;
    if(bool(r0_0.y))
    {
        _S32 = 0.00004999999873689f;
    }
    else
    {
        _S32 = -0.00004999999873689f;
    }
    r0_0[i32(1)] = _S32;
    r0_0[i32(1)] = cb0_0[i32(62)].x + r0_0.y;
    var _S33 : vec2<f32> = v1_0.yx * cb0_0[i32(0)].xx + cb0_0[i32(1)].yx;
    r0_0.z = _S33.x;
    r0_0.w = _S33.y;
    var _S34 : vec2<f32> = (vec2<f32>(0) - cb0_0[i32(2)].yx) + r0_0.zw;
    r0_0.z = _S34.x;
    r0_0.w = _S34.y;
    r1_0[i32(0)] = dot(r0_0.zw, r0_0.zw);
    r1_0[i32(0)] = sqrt(r1_0.x);
    r1_0[i32(1)] = min(abs(r0_0.z), abs(r0_0.w));
    r1_0[i32(2)] = max(abs(r0_0.z), abs(r0_0.w));
    r1_0[i32(2)] = 1.0f / r1_0.z;
    r1_0[i32(1)] = r1_0.y * r1_0.z;
    r1_0[i32(2)] = r1_0.y * r1_0.y;
    r1_0[i32(3)] = r1_0.z * 0.02083509974181652f + -0.08513300120830536f;
    r1_0[i32(3)] = r1_0.z * r1_0.w + 0.18014100193977356f;
    r1_0[i32(3)] = r1_0.z * r1_0.w + -0.3302994966506958f;
    r1_0[i32(2)] = r1_0.z * r1_0.w + 0.99986600875854492f;
    r1_0[i32(3)] = r1_0.y * r1_0.z;
    r2_0[i32(0)] = f32(- i32((abs(r0_0.w)) < (abs(r0_0.z))));
    r1_0[i32(3)] = r1_0.w * -2.0f + 1.57079637050628662f;
    if(bool(r2_0.x))
    {
        _S32 = r1_0.w;
    }
    else
    {
        _S32 = 0.0f;
    }
    r1_0[i32(3)] = _S32;
    r1_0[i32(1)] = r1_0.y * r1_0.z + r1_0.w;
    r1_0[i32(2)] = f32(- i32((r0_0.w) < (- r0_0.w)));
    if(bool(r1_0.z))
    {
        _S32 = -3.14159297943115234f;
    }
    else
    {
        _S32 = 0.0f;
    }
    r1_0[i32(2)] = _S32;
    r1_0[i32(1)] = r1_0.y + r1_0.z;
    r1_0[i32(2)] = min(r0_0.z, r0_0.w);
    r0_0[i32(2)] = max(r0_0.z, r0_0.w);
    r0_0[i32(3)] = f32(- i32((r1_0.z) < (- r1_0.z)));
    r0_0[i32(2)] = f32(- i32((r0_0.z) >= (- r0_0.z)));
    if(bool(r0_0.z))
    {
        _S32 = r0_0.w;
    }
    else
    {
        _S32 = 0.0f;
    }
    r0_0[i32(2)] = _S32;
    if(bool(r0_0.z))
    {
        _S32 = - r1_0.y;
    }
    else
    {
        _S32 = r1_0.y;
    }
    r0_0[i32(2)] = _S32;
    r0_0[i32(2)] = cb0_0[i32(3)].x * cb0_0[i32(4)].x + r0_0.z;
    var _S35 : f32 = r0_0.z;
    r2_0[i32(0)] = sin(_S35);
    r3_0[i32(0)] = cos(_S35);
    r3_0[i32(1)] = r2_0.x;
    var _S36 : vec2<f32> = r3_0.xy * r1_0.xx + cb0_0[i32(2)].xy;
    r0_0.z = _S36.x;
    r0_0.w = _S36.y;
    r1_0[i32(0)] = cb0_0[i32(14)].x * cb0_0[i32(13)].x;
    r1_0[i32(0)] = r0_0.x * cb0_0[i32(15)].x + r1_0.x;
    var _S37 : vec2<f32> = floor(r0_0.zw);
    r1_0.y = _S37.x;
    r1_0.z = _S37.y;
    var _S38 : vec2<f32> = fract(r0_0.zw);
    r0_0.z = _S38.x;
    r0_0.w = _S38.y;
    const _S39 : vec2<f32> = vec2<f32>(0.0f, 10000.0f);
    r2_0.x = _S39.x;
    r2_0.y = _S39.y;
    r1_0[i32(3)] = -1.0f;
    for(;;)
    {
        r2_0[i32(2)] = f32(- i32(i32(1) < i32(r1_0.w)));
        if((r2_0.z) != 0.0f)
        {
            break;
        }
        r3_0[i32(2)] = f32(i32(r1_0.w));
        var _S40 : vec2<f32> = r2_0.yx;
        r2_0.z = _S40.x;
        r2_0.w = _S40.y;
        r3_0[i32(0)] = -1.0f;
        for(;;)
        {
            r3_0[i32(3)] = f32(- i32(i32(1) < i32(r3_0.x)));
            if((r3_0.w) != 0.0f)
            {
                break;
            }
            r3_0[i32(1)] = f32(i32(r3_0.x));
            var _S41 : vec2<f32> = r3_0.yz + (vec2<f32>(0) - r0_0.zw);
            r4_0.x = _S41.x;
            r4_0.y = _S41.y;
            var _S42 : vec2<f32> = r3_0.yz + r1_0.yz;
            r5_0.y = _S42.x;
            r5_0.z = _S42.y;
            var _S43 : vec2<f32> = r5_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r3_0.y = _S43.x;
            r3_0.w = _S43.y;
            var _S44 : vec2<f32> = fract(r3_0.yw);
            r3_0.y = _S44.x;
            r3_0.w = _S44.y;
            var _S45 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r3_0.yw;
            r3_0.y = _S45.x;
            r3_0.w = _S45.y;
            r4_0[i32(2)] = r3_0.y * r3_0.w;
            r3_0[i32(1)] = r3_0.y + r3_0.w;
            r3_0[i32(1)] = r4_0.z * r3_0.y;
            r3_0[i32(1)] = fract(r3_0.y);
            r3_0[i32(3)] = dot(r3_0.yy, r3_0.yy);
            r3_0[i32(3)] = sqrt(r3_0.w);
            r4_0[i32(2)] = 0.5f * r3_0.y;
            r3_0[i32(1)] = r3_0.y * 20.0f + r1_0.x;
            var _S46 : f32 = r3_0.y;
            r6_0[i32(0)] = sin(_S46);
            r7_0[i32(0)] = cos(_S46);
            r7_0[i32(1)] = r6_0.x;
            var _S47 : vec2<f32> = r7_0.xy * r3_0.ww;
            r3_0.y = _S47.x;
            r3_0.w = _S47.y;
            var _S48 : vec2<f32> = r3_0.yw * vec2<f32>(0.5f, 0.5f) + r4_0.zz;
            r3_0.y = _S48.x;
            r3_0.w = _S48.y;
            var _S49 : vec2<f32> = r4_0.xy + r3_0.yw;
            r3_0.y = _S49.x;
            r3_0.w = _S49.y;
            r5_0[i32(0)] = dot(r3_0.yw, r3_0.yw);
            r3_0[i32(1)] = f32(- i32((r5_0.x) < (r2_0.z)));
            var _S50 : vec2<f32> = select(r2_0.zw, r5_0.xy, (r3_0.yy) != vec2<f32>(0.0f));
            r2_0.z = _S50.x;
            r2_0.w = _S50.y;
            r3_0[i32(0)] = f32(i32(r3_0.x) + i32(1));
        }
        var _S51 : vec2<f32> = r2_0.wz;
        r2_0.x = _S51.x;
        r2_0.y = _S51.y;
        r1_0[i32(3)] = f32(i32(r1_0.w) + i32(1));
    }
    r2_0.y = _S39.x;
    r2_0.z = _S39.y;
    r1_0[i32(3)] = -1.0f;
    for(;;)
    {
        r2_0[i32(3)] = f32(- i32(i32(1) < i32(r1_0.w)));
        if((r2_0.w) != 0.0f)
        {
            break;
        }
        r3_0[i32(2)] = f32(i32(r1_0.w));
        var _S52 : vec2<f32> = r2_0.zy;
        r3_0.x = _S52.x;
        r3_0.w = _S52.y;
        r2_0[i32(3)] = -1.0f;
        for(;;)
        {
            r4_0[i32(0)] = f32(- i32(i32(1) < i32(r2_0.w)));
            if((r4_0.x) != 0.0f)
            {
                break;
            }
            r3_0[i32(1)] = f32(i32(r2_0.w));
            var _S53 : vec2<f32> = r3_0.yz + (vec2<f32>(0) - r0_0.zw);
            r4_0.x = _S53.x;
            r4_0.y = _S53.y;
            var _S54 : vec2<f32> = r3_0.yz + r1_0.yz;
            r5_0.y = _S54.x;
            r5_0.z = _S54.y;
            var _S55 : vec2<f32> = r5_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r4_0.z = _S55.x;
            r4_0.w = _S55.y;
            var _S56 : vec2<f32> = fract(r4_0.zw);
            r4_0.z = _S56.x;
            r4_0.w = _S56.y;
            var _S57 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r4_0.zw;
            r4_0.z = _S57.x;
            r4_0.w = _S57.y;
            r3_0[i32(1)] = r4_0.z * r4_0.w;
            r4_0[i32(2)] = r4_0.z + r4_0.w;
            r3_0[i32(1)] = r4_0.z * r3_0.y;
            r3_0[i32(1)] = fract(r3_0.y);
            r4_0[i32(2)] = dot(r3_0.yy, r3_0.yy);
            r4_0[i32(2)] = sqrt(r4_0.z);
            r4_0[i32(3)] = 0.5f * r3_0.y;
            r3_0[i32(1)] = r3_0.y * 20.0f + r1_0.x;
            var _S58 : f32 = r3_0.y;
            r6_0[i32(0)] = sin(_S58);
            r7_0[i32(0)] = cos(_S58);
            r7_0[i32(1)] = r6_0.x;
            var _S59 : vec2<f32> = r7_0.xy * r4_0.zz;
            r5_0.y = _S59.x;
            r5_0.w = _S59.y;
            var _S60 : vec2<f32> = r5_0.yw * vec2<f32>(0.5f, 0.5f) + r4_0.ww;
            r4_0.z = _S60.x;
            r4_0.w = _S60.y;
            var _S61 : vec2<f32> = r4_0.xy + r4_0.zw;
            r4_0.x = _S61.x;
            r4_0.y = _S61.y;
            r5_0[i32(0)] = dot(r4_0.xy, r4_0.xy);
            r3_0[i32(1)] = f32(- i32((r5_0.x) < (r3_0.x)));
            var _S62 : vec2<f32> = select(r3_0.xw, r5_0.xz, (r3_0.yy) != vec2<f32>(0.0f));
            r3_0.x = _S62.x;
            r3_0.w = _S62.y;
            r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
        }
        var _S63 : vec2<f32> = r3_0.wx;
        r2_0.y = _S63.x;
        r2_0.z = _S63.y;
        r1_0[i32(3)] = f32(i32(r1_0.w) + i32(1));
    }
    r1_0[i32(3)] = cb0_0[i32(17)].x * r2_0.y;
    r1_0[i32(3)] = r2_0.x * cb0_0[i32(16)].x + r1_0.w;
    r1_0[i32(3)] = r1_0.w / cb0_0[i32(62)].x;
    r2_0[i32(0)] = f32(- i32((r1_0.w) >= (- r1_0.w)));
    r1_0[i32(3)] = fract(abs(r1_0.w));
    if(bool(r2_0.x))
    {
        _S32 = r1_0.w;
    }
    else
    {
        _S32 = - r1_0.w;
    }
    r1_0[i32(3)] = _S32;
    r1_0[i32(3)] = cb0_0[i32(62)].x * r1_0.w;
    r1_0[i32(3)] = r1_0.w / r0_0.y;
    r1_0[i32(3)] = r0_0.x * cb0_0[i32(63)].x + r1_0.w;
    r2_0[i32(0)] = cb0_0[i32(64)].x * cb0_0[i32(13)].x;
    r1_0[i32(3)] = r1_0.w * cb0_0[i32(65)].x + r2_0.x;
    r1_0[i32(3)] = sin(r1_0.w);
    r1_0[i32(3)] = max(0.0f, r1_0.w);
    r1_0[i32(3)] = saturate(cb0_0[i32(68)].y * r1_0.w + cb0_0[i32(68)].x);
    var _S64 : vec3<f32> = cb0_0[i32(69)].xyz * cb0_0[i32(67)].xyz;
    r3_0.x = _S64.x;
    r3_0.y = _S64.y;
    r3_0.z = _S64.z;
    r3_0[i32(3)] = cb0_0[i32(69)].w * r1_0.w;
    r1_0[i32(3)] = f32(- i32((cb0_0[i32(18)].x) >= 0.0f));
    if(bool(r1_0.w))
    {
        _S32 = 0.00004999999873689f;
    }
    else
    {
        _S32 = -0.00004999999873689f;
    }
    r1_0[i32(3)] = _S32;
    r1_0[i32(3)] = cb0_0[i32(18)].x + r1_0.w;
    const _S65 : vec3<f32> = vec3<f32>(0.0f, 10000.0f, -1.0f);
    r2_0.y = _S65.x;
    r2_0.z = _S65.y;
    r2_0.w = _S65.z;
    for(;;)
    {
        r4_0[i32(0)] = f32(- i32(i32(1) < i32(r2_0.w)));
        if((r4_0.x) != 0.0f)
        {
            break;
        }
        r4_0[i32(2)] = f32(i32(r2_0.w));
        var _S66 : vec2<f32> = r2_0.zy;
        r4_0.x = _S66.x;
        r4_0.w = _S66.y;
        r5_0[i32(0)] = -1.0f;
        for(;;)
        {
            r5_0[i32(1)] = f32(- i32(i32(1) < i32(r5_0.x)));
            if((r5_0.y) != 0.0f)
            {
                break;
            }
            r4_0[i32(1)] = f32(i32(r5_0.x));
            var _S67 : vec2<f32> = r4_0.yz + (vec2<f32>(0) - r0_0.zw);
            r5_0.y = _S67.x;
            r5_0.z = _S67.y;
            var _S68 : vec2<f32> = r4_0.yz + r1_0.yz;
            r6_0.y = _S68.x;
            r6_0.z = _S68.y;
            var _S69 : vec2<f32> = r6_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r6_0.z = _S69.x;
            r6_0.w = _S69.y;
            var _S70 : vec2<f32> = fract(r6_0.zw);
            r6_0.z = _S70.x;
            r6_0.w = _S70.y;
            var _S71 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r6_0.zw;
            r6_0.z = _S71.x;
            r6_0.w = _S71.y;
            r4_0[i32(1)] = r6_0.z * r6_0.w;
            r5_0[i32(3)] = r6_0.z + r6_0.w;
            r4_0[i32(1)] = r5_0.w * r4_0.y;
            r4_0[i32(1)] = fract(r4_0.y);
            r5_0[i32(3)] = dot(r4_0.yy, r4_0.yy);
            r5_0[i32(3)] = sqrt(r5_0.w);
            r6_0[i32(2)] = 0.5f * r4_0.y;
            r4_0[i32(1)] = r4_0.y * 20.0f + r1_0.x;
            var _S72 : f32 = r4_0.y;
            r7_0[i32(0)] = sin(_S72);
            r8_0[i32(0)] = cos(_S72);
            r8_0[i32(1)] = r7_0.x;
            var _S73 : vec2<f32> = r8_0.xy * r5_0.ww;
            r7_0.x = _S73.x;
            r7_0.y = _S73.y;
            var _S74 : vec2<f32> = r7_0.xy * vec2<f32>(0.5f, 0.5f) + r6_0.zz;
            r6_0.z = _S74.x;
            r6_0.w = _S74.y;
            var _S75 : vec2<f32> = r6_0.zw + r5_0.yz;
            r5_0.y = _S75.x;
            r5_0.z = _S75.y;
            r6_0[i32(0)] = dot(r5_0.yz, r5_0.yz);
            r4_0[i32(1)] = f32(- i32((r6_0.x) < (r4_0.x)));
            var _S76 : vec2<f32> = select(r4_0.xw, r6_0.xy, (r4_0.yy) != vec2<f32>(0.0f));
            r4_0.x = _S76.x;
            r4_0.w = _S76.y;
            r5_0[i32(0)] = f32(i32(r5_0.x) + i32(1));
        }
        var _S77 : vec2<f32> = r4_0.wx;
        r2_0.y = _S77.x;
        r2_0.z = _S77.y;
        r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
    }
    r2_0.z = _S39.x;
    r2_0.w = _S39.y;
    r4_0[i32(0)] = -1.0f;
    for(;;)
    {
        r4_0[i32(1)] = f32(- i32(i32(1) < i32(r4_0.x)));
        if((r4_0.y) != 0.0f)
        {
            break;
        }
        r4_0[i32(2)] = f32(i32(r4_0.x));
        var _S78 : vec2<f32> = r2_0.wz;
        r5_0.x = _S78.x;
        r5_0.y = _S78.y;
        r4_0[i32(3)] = -1.0f;
        for(;;)
        {
            r5_0[i32(2)] = f32(- i32(i32(1) < i32(r4_0.w)));
            if((r5_0.z) != 0.0f)
            {
                break;
            }
            r4_0[i32(1)] = f32(i32(r4_0.w));
            var _S79 : vec2<f32> = r4_0.yz + (vec2<f32>(0) - r0_0.zw);
            r5_0.z = _S79.x;
            r5_0.w = _S79.y;
            var _S80 : vec2<f32> = r4_0.yz + r1_0.yz;
            r6_0.y = _S80.x;
            r6_0.z = _S80.y;
            var _S81 : vec2<f32> = r6_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r6_0.y = _S81.x;
            r6_0.w = _S81.y;
            var _S82 : vec2<f32> = fract(r6_0.yw);
            r6_0.y = _S82.x;
            r6_0.w = _S82.y;
            var _S83 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r6_0.yw;
            r6_0.y = _S83.x;
            r6_0.w = _S83.y;
            r4_0[i32(1)] = r6_0.y * r6_0.w;
            r6_0[i32(1)] = r6_0.y + r6_0.w;
            r4_0[i32(1)] = r6_0.y * r4_0.y;
            r4_0[i32(1)] = fract(r4_0.y);
            r6_0[i32(1)] = dot(r4_0.yy, r4_0.yy);
            r6_0[i32(1)] = sqrt(r6_0.y);
            r6_0[i32(3)] = 0.5f * r4_0.y;
            r4_0[i32(1)] = r4_0.y * 20.0f + r1_0.x;
            var _S84 : f32 = r4_0.y;
            r7_0[i32(0)] = sin(_S84);
            r8_0[i32(0)] = cos(_S84);
            r8_0[i32(1)] = r7_0.x;
            var _S85 : vec2<f32> = r8_0.xy * r6_0.yy;
            r7_0.x = _S85.x;
            r7_0.y = _S85.y;
            var _S86 : vec2<f32> = r7_0.xy * vec2<f32>(0.5f, 0.5f) + r6_0.ww;
            r6_0.y = _S86.x;
            r6_0.w = _S86.y;
            var _S87 : vec2<f32> = r6_0.yw + r5_0.zw;
            r5_0.z = _S87.x;
            r5_0.w = _S87.y;
            r6_0[i32(0)] = dot(r5_0.zw, r5_0.zw);
            r4_0[i32(1)] = f32(- i32((r6_0.x) < (r5_0.x)));
            var _S88 : vec2<f32> = select(r5_0.xy, r6_0.xz, (r4_0.yy) != vec2<f32>(0.0f));
            r5_0.x = _S88.x;
            r5_0.y = _S88.y;
            r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
        }
        var _S89 : vec2<f32> = r5_0.yx;
        r2_0.z = _S89.x;
        r2_0.w = _S89.y;
        r4_0[i32(0)] = f32(i32(r4_0.x) + i32(1));
    }
    r2_0[i32(2)] = cb0_0[i32(17)].x * r2_0.z;
    r2_0[i32(1)] = r2_0.y * cb0_0[i32(16)].x + r2_0.z;
    r2_0[i32(1)] = r2_0.y / cb0_0[i32(18)].x;
    r2_0[i32(2)] = f32(- i32((r2_0.y) >= (- r2_0.y)));
    r2_0[i32(1)] = fract(abs(r2_0.y));
    if(bool(r2_0.z))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = - r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    r2_0[i32(1)] = cb0_0[i32(18)].x * r2_0.y;
    r2_0[i32(1)] = r2_0.y / r1_0.w;
    r2_0[i32(2)] = f32(- i32((r2_0.y) < (cb0_0[i32(25)].x)));
    r2_0[i32(3)] = f32(- i32((r2_0.y) < (cb0_0[i32(26)].x)));
    r4_0[i32(0)] = f32(- i32((r2_0.y) >= (cb0_0[i32(25)].x)));
    if(bool(r2_0.w))
    {
        _S32 = r4_0.x;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(3)] = _S32;
    r4_0[i32(0)] = f32(- i32((r2_0.y) < (cb0_0[i32(27)].x)));
    r4_0[i32(1)] = f32(- i32((r2_0.y) >= (cb0_0[i32(26)].x)));
    if(bool(r4_0.y))
    {
        _S32 = r4_0.x;
    }
    else
    {
        _S32 = 0.0f;
    }
    r4_0[i32(0)] = _S32;
    r4_0[i32(1)] = f32(- i32((r2_0.y) >= (cb0_0[i32(27)].x)));
    r4_0[i32(2)] = - cb0_0[i32(29)].x + r2_0.y;
    r4_0[i32(2)] = saturate(cb0_0[i32(29)].y * r4_0.z);
    var _S90 : vec4<f32> = cb0_0[i32(20)].xyzw + (vec4<f32>(0) - cb0_0[i32(19)].xyzw);
    r5_0.x = _S90.x;
    r5_0.y = _S90.y;
    r5_0.z = _S90.z;
    r5_0.w = _S90.w;
    r4_0[i32(2)] = r4_0.z * r5_0.x + cb0_0[i32(19)].x;
    r4_0[i32(3)] = - cb0_0[i32(30)].x + r2_0.y;
    r4_0[i32(3)] = saturate(cb0_0[i32(30)].y * r4_0.w);
    var _S91 : vec4<f32> = cb0_0[i32(21)].xyzw + (vec4<f32>(0) - cb0_0[i32(20)].xyzw);
    r6_0.x = _S91.x;
    r6_0.y = _S91.y;
    r6_0.z = _S91.z;
    r6_0.w = _S91.w;
    r4_0[i32(3)] = r4_0.w * r6_0.x + cb0_0[i32(20)].x;
    r5_0[i32(0)] = - cb0_0[i32(31)].x + r2_0.y;
    r5_0[i32(0)] = saturate(cb0_0[i32(31)].y * r5_0.x);
    var _S92 : vec4<f32> = cb0_0[i32(22)].xyzw + (vec4<f32>(0) - cb0_0[i32(21)].xyzw);
    r7_0.x = _S92.x;
    r7_0.y = _S92.y;
    r7_0.z = _S92.z;
    r7_0.w = _S92.w;
    r5_0[i32(0)] = r5_0.x * r7_0.x + cb0_0[i32(21)].x;
    r2_0[i32(1)] = - cb0_0[i32(32)].x + r2_0.y;
    r2_0[i32(1)] = saturate(cb0_0[i32(32)].y * r2_0.y);
    var _S93 : vec4<f32> = cb0_0[i32(23)].xyzw + (vec4<f32>(0) - cb0_0[i32(22)].xyzw);
    r8_0.x = _S93.x;
    r8_0.y = _S93.y;
    r8_0.z = _S93.z;
    r8_0.w = _S93.w;
    r2_0[i32(1)] = r2_0.y * r8_0.x + cb0_0[i32(22)].x;
    if(bool(r2_0.z))
    {
        _S32 = r4_0.z;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r2_0.w))
    {
        _S32 = r4_0.w;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r4_0.x))
    {
        _S32 = r5_0.x;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r4_0.y))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r4_0[i32(0)] = _S32;
    r2_0.y = _S65.x;
    r2_0.z = _S65.y;
    r2_0.w = _S65.z;
    for(;;)
    {
        r4_0[i32(3)] = f32(- i32(i32(1) < i32(r2_0.w)));
        if((r4_0.w) != 0.0f)
        {
            break;
        }
        r9_0[i32(2)] = f32(i32(r2_0.w));
        var _S94 : vec2<f32> = r2_0.zy;
        r9_0.x = _S94.x;
        r9_0.w = _S94.y;
        r4_0[i32(3)] = -1.0f;
        for(;;)
        {
            r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
            if((r5_0.x) != 0.0f)
            {
                break;
            }
            r9_0[i32(1)] = f32(i32(r4_0.w));
            var _S95 : vec2<f32> = r9_0.yz + (vec2<f32>(0) - r0_0.zw);
            r10_0.x = _S95.x;
            r10_0.y = _S95.y;
            var _S96 : vec2<f32> = r9_0.yz + r1_0.yz;
            r11_0.y = _S96.x;
            r11_0.z = _S96.y;
            var _S97 : vec2<f32> = r11_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r10_0.z = _S97.x;
            r10_0.w = _S97.y;
            var _S98 : vec2<f32> = fract(r10_0.zw);
            r10_0.z = _S98.x;
            r10_0.w = _S98.y;
            var _S99 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r10_0.zw;
            r10_0.z = _S99.x;
            r10_0.w = _S99.y;
            r5_0[i32(0)] = r10_0.z * r10_0.w;
            r6_0[i32(0)] = r10_0.z + r10_0.w;
            r5_0[i32(0)] = r6_0.x * r5_0.x;
            r5_0[i32(0)] = fract(r5_0.x);
            r6_0[i32(0)] = dot(r5_0.xx, r5_0.xx);
            r6_0[i32(0)] = sqrt(r6_0.x);
            r7_0[i32(0)] = 0.5f * r5_0.x;
            r5_0[i32(0)] = r5_0.x * 20.0f + r1_0.x;
            var _S100 : f32 = r5_0.x;
            r5_0[i32(0)] = sin(_S100);
            r12_0[i32(0)] = cos(_S100);
            r12_0[i32(1)] = r5_0.x;
            var _S101 : vec2<f32> = r12_0.xy * r6_0.xx;
            r10_0.z = _S101.x;
            r10_0.w = _S101.y;
            var _S102 : vec2<f32> = r10_0.zw * vec2<f32>(0.5f, 0.5f) + r7_0.xx;
            r10_0.z = _S102.x;
            r10_0.w = _S102.y;
            var _S103 : vec2<f32> = r10_0.xy + r10_0.zw;
            r10_0.x = _S103.x;
            r10_0.y = _S103.y;
            r11_0[i32(0)] = dot(r10_0.xy, r10_0.xy);
            r5_0[i32(0)] = f32(- i32((r11_0.x) < (r9_0.x)));
            var _S104 : vec2<f32> = select(r9_0.xw, r11_0.xy, (r5_0.xx) != vec2<f32>(0.0f));
            r9_0.x = _S104.x;
            r9_0.w = _S104.y;
            r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
        }
        var _S105 : vec2<f32> = r9_0.wx;
        r2_0.y = _S105.x;
        r2_0.z = _S105.y;
        r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
    }
    r2_0.z = _S39.x;
    r2_0.w = _S39.y;
    r4_0[i32(3)] = -1.0f;
    for(;;)
    {
        r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
        if((r5_0.x) != 0.0f)
        {
            break;
        }
        r9_0[i32(2)] = f32(i32(r4_0.w));
        var _S106 : vec2<f32> = r2_0.wz;
        r9_0.x = _S106.x;
        r9_0.w = _S106.y;
        r5_0[i32(0)] = -1.0f;
        for(;;)
        {
            r6_0[i32(0)] = f32(- i32(i32(1) < i32(r5_0.x)));
            if((r6_0.x) != 0.0f)
            {
                break;
            }
            r9_0[i32(1)] = f32(i32(r5_0.x));
            var _S107 : vec2<f32> = r9_0.yz + (vec2<f32>(0) - r0_0.zw);
            r10_0.x = _S107.x;
            r10_0.y = _S107.y;
            var _S108 : vec2<f32> = r9_0.yz + r1_0.yz;
            r11_0.y = _S108.x;
            r11_0.z = _S108.y;
            var _S109 : vec2<f32> = r11_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r10_0.z = _S109.x;
            r10_0.w = _S109.y;
            var _S110 : vec2<f32> = fract(r10_0.zw);
            r10_0.z = _S110.x;
            r10_0.w = _S110.y;
            var _S111 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r10_0.zw;
            r10_0.z = _S111.x;
            r10_0.w = _S111.y;
            r6_0[i32(0)] = r10_0.z * r10_0.w;
            r7_0[i32(0)] = r10_0.z + r10_0.w;
            r6_0[i32(0)] = r7_0.x * r6_0.x;
            r6_0[i32(0)] = fract(r6_0.x);
            r7_0[i32(0)] = dot(r6_0.xx, r6_0.xx);
            r7_0[i32(0)] = sqrt(r7_0.x);
            r8_0[i32(0)] = 0.5f * r6_0.x;
            r6_0[i32(0)] = r6_0.x * 20.0f + r1_0.x;
            var _S112 : f32 = r6_0.x;
            r6_0[i32(0)] = sin(_S112);
            r12_0[i32(0)] = cos(_S112);
            r12_0[i32(1)] = r6_0.x;
            var _S113 : vec2<f32> = r12_0.xy * r7_0.xx;
            r10_0.z = _S113.x;
            r10_0.w = _S113.y;
            var _S114 : vec2<f32> = r10_0.zw * vec2<f32>(0.5f, 0.5f) + r8_0.xx;
            r10_0.z = _S114.x;
            r10_0.w = _S114.y;
            var _S115 : vec2<f32> = r10_0.xy + r10_0.zw;
            r10_0.x = _S115.x;
            r10_0.y = _S115.y;
            r11_0[i32(0)] = dot(r10_0.xy, r10_0.xy);
            r6_0[i32(0)] = f32(- i32((r11_0.x) < (r9_0.x)));
            var _S116 : vec2<f32> = select(r9_0.xw, r11_0.xz, (r6_0.xx) != vec2<f32>(0.0f));
            r9_0.x = _S116.x;
            r9_0.w = _S116.y;
            r5_0[i32(0)] = f32(i32(r5_0.x) + i32(1));
        }
        var _S117 : vec2<f32> = r9_0.wx;
        r2_0.z = _S117.x;
        r2_0.w = _S117.y;
        r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
    }
    r2_0[i32(2)] = cb0_0[i32(17)].x * r2_0.z;
    r2_0[i32(1)] = r2_0.y * cb0_0[i32(16)].x + r2_0.z;
    r2_0[i32(1)] = r2_0.y / cb0_0[i32(18)].x;
    r2_0[i32(2)] = f32(- i32((r2_0.y) >= (- r2_0.y)));
    r2_0[i32(1)] = fract(abs(r2_0.y));
    if(bool(r2_0.z))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = - r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    r2_0[i32(1)] = cb0_0[i32(18)].x * r2_0.y;
    r2_0[i32(1)] = r2_0.y / r1_0.w;
    r2_0[i32(2)] = f32(- i32((r2_0.y) < (cb0_0[i32(34)].x)));
    r2_0[i32(3)] = f32(- i32((r2_0.y) < (cb0_0[i32(35)].x)));
    r4_0[i32(3)] = f32(- i32((r2_0.y) >= (cb0_0[i32(34)].x)));
    if(bool(r2_0.w))
    {
        _S32 = r4_0.w;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(3)] = _S32;
    r4_0[i32(3)] = f32(- i32((r2_0.y) < (cb0_0[i32(36)].x)));
    r5_0[i32(0)] = f32(- i32((r2_0.y) >= (cb0_0[i32(35)].x)));
    if(bool(r4_0.w))
    {
        _S32 = r5_0.x;
    }
    else
    {
        _S32 = 0.0f;
    }
    r4_0[i32(3)] = _S32;
    r5_0[i32(0)] = f32(- i32((r2_0.y) >= (cb0_0[i32(36)].x)));
    r6_0[i32(0)] = - cb0_0[i32(38)].x + r2_0.y;
    r6_0[i32(0)] = saturate(cb0_0[i32(38)].y * r6_0.x);
    r5_0[i32(1)] = r6_0.x * r5_0.y + cb0_0[i32(19)].y;
    r6_0[i32(0)] = - cb0_0[i32(39)].x + r2_0.y;
    r6_0[i32(0)] = saturate(cb0_0[i32(39)].y * r6_0.x);
    r6_0[i32(0)] = r6_0.x * r6_0.y + cb0_0[i32(20)].y;
    r6_0[i32(1)] = - cb0_0[i32(40)].x + r2_0.y;
    r6_0[i32(1)] = saturate(cb0_0[i32(40)].y * r6_0.y);
    r6_0[i32(1)] = r6_0.y * r7_0.y + cb0_0[i32(21)].y;
    r2_0[i32(1)] = - cb0_0[i32(41)].x + r2_0.y;
    r2_0[i32(1)] = saturate(cb0_0[i32(41)].y * r2_0.y);
    r2_0[i32(1)] = r2_0.y * r8_0.y + cb0_0[i32(22)].y;
    if(bool(r2_0.z))
    {
        _S32 = r5_0.y;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r2_0.w))
    {
        _S32 = r6_0.x;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r4_0.w))
    {
        _S32 = r6_0.y;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r5_0.x))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r4_0[i32(1)] = _S32;
    r2_0.y = _S65.x;
    r2_0.z = _S65.y;
    r2_0.w = _S65.z;
    for(;;)
    {
        r4_0[i32(3)] = f32(- i32(i32(1) < i32(r2_0.w)));
        if((r4_0.w) != 0.0f)
        {
            break;
        }
        r9_0[i32(2)] = f32(i32(r2_0.w));
        var _S118 : vec2<f32> = r2_0.zy;
        r5_0.x = _S118.x;
        r5_0.y = _S118.y;
        r4_0[i32(3)] = -1.0f;
        for(;;)
        {
            r6_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
            if((r6_0.x) != 0.0f)
            {
                break;
            }
            r9_0[i32(1)] = f32(i32(r4_0.w));
            var _S119 : vec2<f32> = r9_0.yz + (vec2<f32>(0) - r0_0.zw);
            r6_0.x = _S119.x;
            r6_0.y = _S119.y;
            var _S120 : vec2<f32> = r9_0.yz + r1_0.yz;
            r10_0.y = _S120.x;
            r10_0.z = _S120.y;
            var _S121 : vec2<f32> = r10_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r7_0.x = _S121.x;
            r7_0.y = _S121.y;
            var _S122 : vec2<f32> = fract(r7_0.xy);
            r7_0.x = _S122.x;
            r7_0.y = _S122.y;
            var _S123 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r7_0.xy;
            r7_0.x = _S123.x;
            r7_0.y = _S123.y;
            r8_0[i32(0)] = r7_0.x * r7_0.y;
            r7_0[i32(0)] = r7_0.x + r7_0.y;
            r7_0[i32(0)] = r8_0.x * r7_0.x;
            r7_0[i32(0)] = fract(r7_0.x);
            r7_0[i32(1)] = dot(r7_0.xx, r7_0.xx);
            r7_0[i32(1)] = sqrt(r7_0.y);
            r8_0[i32(0)] = 0.5f * r7_0.x;
            r7_0[i32(0)] = r7_0.x * 20.0f + r1_0.x;
            var _S124 : f32 = r7_0.x;
            r7_0[i32(0)] = sin(_S124);
            r9_0[i32(0)] = cos(_S124);
            r9_0[i32(1)] = r7_0.x;
            var _S125 : vec2<f32> = r9_0.xy * r7_0.yy;
            r7_0.x = _S125.x;
            r7_0.y = _S125.y;
            var _S126 : vec2<f32> = r7_0.xy * vec2<f32>(0.5f, 0.5f) + r8_0.xx;
            r7_0.x = _S126.x;
            r7_0.y = _S126.y;
            var _S127 : vec2<f32> = r7_0.xy + r6_0.xy;
            r6_0.x = _S127.x;
            r6_0.y = _S127.y;
            r10_0[i32(0)] = dot(r6_0.xy, r6_0.xy);
            r6_0[i32(0)] = f32(- i32((r10_0.x) < (r5_0.x)));
            var _S128 : vec2<f32> = select(r5_0.xy, r10_0.xy, (r6_0.xx) != vec2<f32>(0.0f));
            r5_0.x = _S128.x;
            r5_0.y = _S128.y;
            r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
        }
        var _S129 : vec2<f32> = r5_0.yx;
        r2_0.y = _S129.x;
        r2_0.z = _S129.y;
        r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
    }
    r2_0.z = _S39.x;
    r2_0.w = _S39.y;
    r4_0[i32(3)] = -1.0f;
    for(;;)
    {
        r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
        if((r5_0.x) != 0.0f)
        {
            break;
        }
        r9_0[i32(2)] = f32(i32(r4_0.w));
        var _S130 : vec2<f32> = r2_0.wz;
        r5_0.x = _S130.x;
        r5_0.y = _S130.y;
        r6_0[i32(0)] = -1.0f;
        for(;;)
        {
            r6_0[i32(1)] = f32(- i32(i32(1) < i32(r6_0.x)));
            if((r6_0.y) != 0.0f)
            {
                break;
            }
            r9_0[i32(1)] = f32(i32(r6_0.x));
            var _S131 : vec2<f32> = r9_0.yz + (vec2<f32>(0) - r0_0.zw);
            r7_0.x = _S131.x;
            r7_0.y = _S131.y;
            var _S132 : vec2<f32> = r9_0.yz + r1_0.yz;
            r10_0.y = _S132.x;
            r10_0.z = _S132.y;
            var _S133 : vec2<f32> = r10_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r8_0.x = _S133.x;
            r8_0.y = _S133.y;
            var _S134 : vec2<f32> = fract(r8_0.xy);
            r8_0.x = _S134.x;
            r8_0.y = _S134.y;
            var _S135 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r8_0.xy;
            r8_0.x = _S135.x;
            r8_0.y = _S135.y;
            r6_0[i32(1)] = r8_0.x * r8_0.y;
            r8_0[i32(0)] = r8_0.x + r8_0.y;
            r6_0[i32(1)] = r8_0.x * r6_0.y;
            r6_0[i32(1)] = fract(r6_0.y);
            r8_0[i32(0)] = dot(r6_0.yy, r6_0.yy);
            r8_0[i32(0)] = sqrt(r8_0.x);
            r8_0[i32(1)] = 0.5f * r6_0.y;
            r6_0[i32(1)] = r6_0.y * 20.0f + r1_0.x;
            var _S136 : f32 = r6_0.y;
            r9_0[i32(0)] = sin(_S136);
            r11_0[i32(0)] = cos(_S136);
            r11_0[i32(1)] = r9_0.x;
            var _S137 : vec2<f32> = r11_0.xy * r8_0.xx;
            r9_0.x = _S137.x;
            r9_0.y = _S137.y;
            var _S138 : vec2<f32> = r9_0.xy * vec2<f32>(0.5f, 0.5f) + r8_0.yy;
            r8_0.x = _S138.x;
            r8_0.y = _S138.y;
            var _S139 : vec2<f32> = r8_0.xy + r7_0.xy;
            r7_0.x = _S139.x;
            r7_0.y = _S139.y;
            r10_0[i32(0)] = dot(r7_0.xy, r7_0.xy);
            r6_0[i32(1)] = f32(- i32((r10_0.x) < (r5_0.x)));
            var _S140 : vec2<f32> = select(r5_0.xy, r10_0.xz, (r6_0.yy) != vec2<f32>(0.0f));
            r5_0.x = _S140.x;
            r5_0.y = _S140.y;
            r6_0[i32(0)] = f32(i32(r6_0.x) + i32(1));
        }
        var _S141 : vec2<f32> = r5_0.yx;
        r2_0.z = _S141.x;
        r2_0.w = _S141.y;
        r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
    }
    r2_0[i32(2)] = cb0_0[i32(17)].x * r2_0.z;
    r2_0[i32(1)] = r2_0.y * cb0_0[i32(16)].x + r2_0.z;
    r2_0[i32(1)] = r2_0.y / cb0_0[i32(18)].x;
    r2_0[i32(2)] = f32(- i32((r2_0.y) >= (- r2_0.y)));
    r2_0[i32(1)] = fract(abs(r2_0.y));
    if(bool(r2_0.z))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = - r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    r2_0[i32(1)] = cb0_0[i32(18)].x * r2_0.y;
    r2_0[i32(1)] = r2_0.y / r1_0.w;
    r2_0[i32(2)] = f32(- i32((r2_0.y) < (cb0_0[i32(43)].x)));
    r2_0[i32(3)] = f32(- i32((r2_0.y) < (cb0_0[i32(44)].x)));
    r4_0[i32(3)] = f32(- i32((r2_0.y) >= (cb0_0[i32(43)].x)));
    if(bool(r2_0.w))
    {
        _S32 = r4_0.w;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(3)] = _S32;
    r4_0[i32(3)] = f32(- i32((r2_0.y) < (cb0_0[i32(45)].x)));
    r5_0[i32(0)] = f32(- i32((r2_0.y) >= (cb0_0[i32(44)].x)));
    if(bool(r4_0.w))
    {
        _S32 = r5_0.x;
    }
    else
    {
        _S32 = 0.0f;
    }
    r4_0[i32(3)] = _S32;
    r5_0[i32(0)] = f32(- i32((r2_0.y) >= (cb0_0[i32(45)].x)));
    r5_0[i32(1)] = - cb0_0[i32(47)].x + r2_0.y;
    r5_0[i32(1)] = saturate(cb0_0[i32(47)].y * r5_0.y);
    r5_0[i32(1)] = r5_0.y * r5_0.z + cb0_0[i32(19)].z;
    r5_0[i32(2)] = - cb0_0[i32(48)].x + r2_0.y;
    r5_0[i32(2)] = saturate(cb0_0[i32(48)].y * r5_0.z);
    r5_0[i32(2)] = r5_0.z * r6_0.z + cb0_0[i32(20)].z;
    r6_0[i32(0)] = - cb0_0[i32(49)].x + r2_0.y;
    r6_0[i32(0)] = saturate(cb0_0[i32(49)].y * r6_0.x);
    r6_0[i32(0)] = r6_0.x * r7_0.z + cb0_0[i32(21)].z;
    r2_0[i32(1)] = - cb0_0[i32(50)].x + r2_0.y;
    r2_0[i32(1)] = saturate(cb0_0[i32(50)].y * r2_0.y);
    r2_0[i32(1)] = r2_0.y * r8_0.z + cb0_0[i32(22)].z;
    if(bool(r2_0.z))
    {
        _S32 = r5_0.y;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r2_0.w))
    {
        _S32 = r5_0.z;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r4_0.w))
    {
        _S32 = r6_0.x;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r2_0[i32(2)] = _S32;
    if(bool(r5_0.x))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = r2_0.z;
    }
    r4_0[i32(2)] = _S32;
    r2_0.y = _S65.x;
    r2_0.z = _S65.y;
    r2_0.w = _S65.z;
    for(;;)
    {
        r4_0[i32(3)] = f32(- i32(i32(1) < i32(r2_0.w)));
        if((r4_0.w) != 0.0f)
        {
            break;
        }
        r5_0[i32(2)] = f32(i32(r2_0.w));
        var _S142 : vec2<f32> = r2_0.zy;
        r6_0.x = _S142.x;
        r6_0.y = _S142.y;
        r4_0[i32(3)] = -1.0f;
        for(;;)
        {
            r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
            if((r5_0.x) != 0.0f)
            {
                break;
            }
            r5_0[i32(1)] = f32(i32(r4_0.w));
            var _S143 : vec2<f32> = r5_0.yz + (vec2<f32>(0) - r0_0.zw);
            r7_0.x = _S143.x;
            r7_0.y = _S143.y;
            var _S144 : vec2<f32> = r5_0.yz + r1_0.yz;
            r8_0.y = _S144.x;
            r8_0.z = _S144.y;
            var _S145 : vec2<f32> = r8_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r5_0.x = _S145.x;
            r5_0.y = _S145.y;
            var _S146 : vec2<f32> = fract(r5_0.xy);
            r5_0.x = _S146.x;
            r5_0.y = _S146.y;
            var _S147 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r5_0.xy;
            r5_0.x = _S147.x;
            r5_0.y = _S147.y;
            r6_0[i32(2)] = r5_0.x * r5_0.y;
            r5_0[i32(0)] = r5_0.x + r5_0.y;
            r5_0[i32(0)] = r6_0.z * r5_0.x;
            r5_0[i32(0)] = fract(r5_0.x);
            r5_0[i32(1)] = dot(r5_0.xx, r5_0.xx);
            r5_0[i32(1)] = sqrt(r5_0.y);
            r6_0[i32(2)] = 0.5f * r5_0.x;
            r5_0[i32(0)] = r5_0.x * 20.0f + r1_0.x;
            var _S148 : f32 = r5_0.x;
            r5_0[i32(0)] = sin(_S148);
            r9_0[i32(0)] = cos(_S148);
            r9_0[i32(1)] = r5_0.x;
            var _S149 : vec2<f32> = r9_0.xy * r5_0.yy;
            r5_0.x = _S149.x;
            r5_0.y = _S149.y;
            var _S150 : vec2<f32> = r5_0.xy * vec2<f32>(0.5f, 0.5f) + r6_0.zz;
            r5_0.x = _S150.x;
            r5_0.y = _S150.y;
            var _S151 : vec2<f32> = r7_0.xy + r5_0.xy;
            r5_0.x = _S151.x;
            r5_0.y = _S151.y;
            r8_0[i32(0)] = dot(r5_0.xy, r5_0.xy);
            r5_0[i32(0)] = f32(- i32((r8_0.x) < (r6_0.x)));
            var _S152 : vec2<f32> = select(r6_0.xy, r8_0.xy, (r5_0.xx) != vec2<f32>(0.0f));
            r6_0.x = _S152.x;
            r6_0.y = _S152.y;
            r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
        }
        var _S153 : vec2<f32> = r6_0.yx;
        r2_0.y = _S153.x;
        r2_0.z = _S153.y;
        r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
    }
    r2_0.z = _S39.x;
    r2_0.w = _S39.y;
    r4_0[i32(3)] = -1.0f;
    for(;;)
    {
        r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
        if((r5_0.x) != 0.0f)
        {
            break;
        }
        r5_0[i32(2)] = f32(i32(r4_0.w));
        var _S154 : vec2<f32> = r2_0.wz;
        r6_0.x = _S154.x;
        r6_0.y = _S154.y;
        r5_0[i32(0)] = -1.0f;
        for(;;)
        {
            r6_0[i32(2)] = f32(- i32(i32(1) < i32(r5_0.x)));
            if((r6_0.z) != 0.0f)
            {
                break;
            }
            r5_0[i32(1)] = f32(i32(r5_0.x));
            var _S155 : vec2<f32> = r5_0.yz + (vec2<f32>(0) - r0_0.zw);
            r7_0.x = _S155.x;
            r7_0.y = _S155.y;
            var _S156 : vec2<f32> = r5_0.yz + r1_0.yz;
            r8_0.y = _S156.x;
            r8_0.z = _S156.y;
            var _S157 : vec2<f32> = r8_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r9_0.x = _S157.x;
            r9_0.y = _S157.y;
            var _S158 : vec2<f32> = fract(r9_0.xy);
            r9_0.x = _S158.x;
            r9_0.y = _S158.y;
            var _S159 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r9_0.xy;
            r9_0.x = _S159.x;
            r9_0.y = _S159.y;
            r5_0[i32(1)] = r9_0.x * r9_0.y;
            r6_0[i32(2)] = r9_0.x + r9_0.y;
            r5_0[i32(1)] = r6_0.z * r5_0.y;
            r5_0[i32(1)] = fract(r5_0.y);
            r6_0[i32(2)] = dot(r5_0.yy, r5_0.yy);
            r6_0[i32(2)] = sqrt(r6_0.z);
            r7_0[i32(2)] = 0.5f * r5_0.y;
            r5_0[i32(1)] = r5_0.y * 20.0f + r1_0.x;
            var _S160 : f32 = r5_0.y;
            r9_0[i32(0)] = sin(_S160);
            r10_0[i32(0)] = cos(_S160);
            r10_0[i32(1)] = r9_0.x;
            var _S161 : vec2<f32> = r10_0.xy * r6_0.zz;
            r9_0.x = _S161.x;
            r9_0.y = _S161.y;
            var _S162 : vec2<f32> = r9_0.xy * vec2<f32>(0.5f, 0.5f) + r7_0.zz;
            r9_0.x = _S162.x;
            r9_0.y = _S162.y;
            var _S163 : vec2<f32> = r9_0.xy + r7_0.xy;
            r7_0.x = _S163.x;
            r7_0.y = _S163.y;
            r8_0[i32(0)] = dot(r7_0.xy, r7_0.xy);
            r5_0[i32(1)] = f32(- i32((r8_0.x) < (r6_0.x)));
            var _S164 : vec2<f32> = select(r6_0.xy, r8_0.xz, (r5_0.yy) != vec2<f32>(0.0f));
            r6_0.x = _S164.x;
            r6_0.y = _S164.y;
            r5_0[i32(0)] = f32(i32(r5_0.x) + i32(1));
        }
        var _S165 : vec2<f32> = r6_0.yx;
        r2_0.z = _S165.x;
        r2_0.w = _S165.y;
        r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
    }
    r2_0[i32(2)] = cb0_0[i32(17)].x * r2_0.z;
    r2_0[i32(1)] = r2_0.y * cb0_0[i32(16)].x + r2_0.z;
    r2_0[i32(1)] = r2_0.y / cb0_0[i32(18)].x;
    r2_0[i32(2)] = f32(- i32((r2_0.y) >= (- r2_0.y)));
    r2_0[i32(1)] = fract(abs(r2_0.y));
    if(bool(r2_0.z))
    {
        _S32 = r2_0.y;
    }
    else
    {
        _S32 = - r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    r2_0[i32(1)] = cb0_0[i32(18)].x * r2_0.y;
    r1_0[i32(3)] = r2_0.y / r1_0.w;
    r2_0[i32(1)] = f32(- i32((r1_0.w) < (cb0_0[i32(52)].x)));
    r2_0[i32(2)] = f32(- i32((r1_0.w) < (cb0_0[i32(53)].x)));
    r2_0[i32(3)] = f32(- i32((r1_0.w) >= (cb0_0[i32(52)].x)));
    if(bool(r2_0.w))
    {
        _S32 = r2_0.z;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(2)] = _S32;
    r2_0[i32(3)] = f32(- i32((r1_0.w) < (cb0_0[i32(54)].x)));
    r4_0[i32(3)] = f32(- i32((r1_0.w) >= (cb0_0[i32(53)].x)));
    if(bool(r2_0.w))
    {
        _S32 = r4_0.w;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(3)] = _S32;
    r4_0[i32(3)] = f32(- i32((r1_0.w) >= (cb0_0[i32(54)].x)));
    r5_0[i32(0)] = - cb0_0[i32(56)].x + r1_0.w;
    r5_0[i32(0)] = saturate(cb0_0[i32(56)].y * r5_0.x);
    r5_0[i32(0)] = r5_0.x * r5_0.w + cb0_0[i32(19)].w;
    r5_0[i32(1)] = - cb0_0[i32(57)].x + r1_0.w;
    r5_0[i32(1)] = saturate(cb0_0[i32(57)].y * r5_0.y);
    r5_0[i32(1)] = r5_0.y * r6_0.w + cb0_0[i32(20)].w;
    r5_0[i32(2)] = - cb0_0[i32(58)].x + r1_0.w;
    r5_0[i32(2)] = saturate(cb0_0[i32(58)].y * r5_0.z);
    r5_0[i32(2)] = r5_0.z * r7_0.w + cb0_0[i32(21)].w;
    r1_0[i32(3)] = - cb0_0[i32(59)].x + r1_0.w;
    r1_0[i32(3)] = saturate(cb0_0[i32(59)].y * r1_0.w);
    r1_0[i32(3)] = r1_0.w * r8_0.w + cb0_0[i32(22)].w;
    if(bool(r2_0.y))
    {
        _S32 = r5_0.x;
    }
    else
    {
        _S32 = 0.0f;
    }
    r2_0[i32(1)] = _S32;
    if(bool(r2_0.z))
    {
        _S32 = r5_0.y;
    }
    else
    {
        _S32 = r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    if(bool(r2_0.w))
    {
        _S32 = r5_0.z;
    }
    else
    {
        _S32 = r2_0.y;
    }
    r2_0[i32(1)] = _S32;
    if(bool(r4_0.w))
    {
        _S32 = r1_0.w;
    }
    else
    {
        _S32 = r2_0.y;
    }
    r1_0[i32(3)] = _S32;
    r2_0[i32(1)] = 1.0f;
    r2_0[i32(1)] = saturate(cb0_0[i32(61)].x * r2_0.y);
    r2_0.z = _S39.x;
    r2_0.w = _S39.y;
    r4_0[i32(3)] = -1.0f;
    for(;;)
    {
        r5_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
        if((r5_0.x) != 0.0f)
        {
            break;
        }
        r5_0[i32(2)] = f32(i32(r4_0.w));
        var _S166 : vec2<f32> = r2_0.wz;
        r5_0.x = _S166.x;
        r5_0.w = _S166.y;
        r6_0[i32(0)] = -1.0f;
        for(;;)
        {
            r6_0[i32(1)] = f32(- i32(i32(1) < i32(r6_0.x)));
            if((r6_0.y) != 0.0f)
            {
                break;
            }
            r5_0[i32(1)] = f32(i32(r6_0.x));
            var _S167 : vec2<f32> = r5_0.yz + (vec2<f32>(0) - r0_0.zw);
            r6_0.y = _S167.x;
            r6_0.z = _S167.y;
            var _S168 : vec2<f32> = r5_0.yz + r1_0.yz;
            r7_0.y = _S168.x;
            r7_0.z = _S168.y;
            var _S169 : vec2<f32> = r7_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r7_0.z = _S169.x;
            r7_0.w = _S169.y;
            var _S170 : vec2<f32> = fract(r7_0.zw);
            r7_0.z = _S170.x;
            r7_0.w = _S170.y;
            var _S171 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r7_0.zw;
            r7_0.z = _S171.x;
            r7_0.w = _S171.y;
            r5_0[i32(1)] = r7_0.z * r7_0.w;
            r6_0[i32(3)] = r7_0.z + r7_0.w;
            r5_0[i32(1)] = r6_0.w * r5_0.y;
            r5_0[i32(1)] = fract(r5_0.y);
            r6_0[i32(3)] = dot(r5_0.yy, r5_0.yy);
            r6_0[i32(3)] = sqrt(r6_0.w);
            r7_0[i32(2)] = 0.5f * r5_0.y;
            r5_0[i32(1)] = r5_0.y * 20.0f + r1_0.x;
            var _S172 : f32 = r5_0.y;
            r8_0[i32(0)] = sin(_S172);
            r9_0[i32(0)] = cos(_S172);
            r9_0[i32(1)] = r8_0.x;
            var _S173 : vec2<f32> = r9_0.xy * r6_0.ww;
            r8_0.x = _S173.x;
            r8_0.y = _S173.y;
            var _S174 : vec2<f32> = r8_0.xy * vec2<f32>(0.5f, 0.5f) + r7_0.zz;
            r7_0.z = _S174.x;
            r7_0.w = _S174.y;
            var _S175 : vec2<f32> = r7_0.zw + r6_0.yz;
            r6_0.y = _S175.x;
            r6_0.z = _S175.y;
            r7_0[i32(0)] = dot(r6_0.yz, r6_0.yz);
            r5_0[i32(1)] = f32(- i32((r7_0.x) < (r5_0.x)));
            var _S176 : vec2<f32> = select(r5_0.xw, r7_0.xy, (r5_0.yy) != vec2<f32>(0.0f));
            r5_0.x = _S176.x;
            r5_0.w = _S176.y;
            r6_0[i32(0)] = f32(i32(r6_0.x) + i32(1));
        }
        var _S177 : vec2<f32> = r5_0.wx;
        r2_0.z = _S177.x;
        r2_0.w = _S177.y;
        r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
    }
    r5_0.x = _S39.x;
    r5_0.y = _S39.y;
    r2_0[i32(3)] = -1.0f;
    for(;;)
    {
        r4_0[i32(3)] = f32(- i32(i32(1) < i32(r2_0.w)));
        if((r4_0.w) != 0.0f)
        {
            break;
        }
        r6_0[i32(2)] = f32(i32(r2_0.w));
        var _S178 : vec2<f32> = r5_0.yx;
        r5_0.z = _S178.x;
        r5_0.w = _S178.y;
        r4_0[i32(3)] = -1.0f;
        for(;;)
        {
            r6_0[i32(0)] = f32(- i32(i32(1) < i32(r4_0.w)));
            if((r6_0.x) != 0.0f)
            {
                break;
            }
            r6_0[i32(1)] = f32(i32(r4_0.w));
            var _S179 : vec2<f32> = r6_0.yz + (vec2<f32>(0) - r0_0.zw);
            r6_0.x = _S179.x;
            r6_0.w = _S179.y;
            var _S180 : vec2<f32> = r6_0.yz + r1_0.yz;
            r7_0.y = _S180.x;
            r7_0.z = _S180.y;
            var _S181 : vec2<f32> = r7_0.yz * vec2<f32>(0.31830990314483643f, 0.31830990314483643f) + vec2<f32>(0.10000000149011612f, 0.10000000149011612f);
            r7_0.y = _S181.x;
            r7_0.w = _S181.y;
            var _S182 : vec2<f32> = fract(r7_0.yw);
            r7_0.y = _S182.x;
            r7_0.w = _S182.y;
            var _S183 : vec2<f32> = vec2<f32>(17.0f, 17.0f) * r7_0.yw;
            r7_0.y = _S183.x;
            r7_0.w = _S183.y;
            r6_0[i32(1)] = r7_0.y * r7_0.w;
            r7_0[i32(1)] = r7_0.y + r7_0.w;
            r6_0[i32(1)] = r7_0.y * r6_0.y;
            r6_0[i32(1)] = fract(r6_0.y);
            r7_0[i32(1)] = dot(r6_0.yy, r6_0.yy);
            r7_0[i32(1)] = sqrt(r7_0.y);
            r7_0[i32(3)] = 0.5f * r6_0.y;
            r6_0[i32(1)] = r6_0.y * 20.0f + r1_0.x;
            var _S184 : f32 = r6_0.y;
            r8_0[i32(0)] = sin(_S184);
            r9_0[i32(0)] = cos(_S184);
            r9_0[i32(1)] = r8_0.x;
            var _S185 : vec2<f32> = r9_0.xy * r7_0.yy;
            r8_0.x = _S185.x;
            r8_0.y = _S185.y;
            var _S186 : vec2<f32> = r8_0.xy * vec2<f32>(0.5f, 0.5f) + r7_0.ww;
            r7_0.y = _S186.x;
            r7_0.w = _S186.y;
            var _S187 : vec2<f32> = r7_0.yw + r6_0.xw;
            r6_0.x = _S187.x;
            r6_0.y = _S187.y;
            r7_0[i32(0)] = dot(r6_0.xy, r6_0.xy);
            r6_0[i32(0)] = f32(- i32((r7_0.x) < (r5_0.z)));
            var _S188 : vec2<f32> = select(r5_0.zw, r7_0.xz, (r6_0.xx) != vec2<f32>(0.0f));
            r5_0.z = _S188.x;
            r5_0.w = _S188.y;
            r4_0[i32(3)] = f32(i32(r4_0.w) + i32(1));
        }
        var _S189 : vec2<f32> = r5_0.wz;
        r5_0.x = _S189.x;
        r5_0.y = _S189.y;
        r2_0[i32(3)] = f32(i32(r2_0.w) + i32(1));
    }
    r0_0[i32(2)] = cb0_0[i32(17)].x * r5_0.x;
    r0_0[i32(2)] = r2_0.z * cb0_0[i32(16)].x + r0_0.z;
    r0_0[i32(2)] = r0_0.z / cb0_0[i32(62)].x;
    r0_0[i32(3)] = f32(- i32((r0_0.z) >= (- r0_0.z)));
    r0_0[i32(2)] = fract(abs(r0_0.z));
    if(bool(r0_0.w))
    {
        _S32 = r0_0.z;
    }
    else
    {
        _S32 = - r0_0.z;
    }
    r0_0[i32(2)] = _S32;
    r0_0[i32(2)] = cb0_0[i32(62)].x * r0_0.z;
    r0_0[i32(1)] = r0_0.z / r0_0.y;
    r0_0[i32(0)] = r0_0.x * cb0_0[i32(63)].x + r0_0.y;
    r0_0[i32(0)] = r0_0.x * cb0_0[i32(65)].x + r2_0.x;
    r0_0[i32(0)] = sin(r0_0.x);
    r0_0[i32(0)] = max(0.0f, r0_0.x);
    r0_0[i32(0)] = saturate(cb0_0[i32(66)].y * r0_0.x + cb0_0[i32(66)].x);
    r0_0[i32(0)] = r2_0.y + r0_0.x;
    r0_0[i32(0)] = min(1.0f, r0_0.x);
    var _S190 : vec3<f32> = cb0_0[i32(60)].xyz * r4_0.xyz;
    r2_0.x = _S190.x;
    r2_0.y = _S190.y;
    r2_0.z = _S190.z;
    r2_0[i32(3)] = r1_0.w * r0_0.x;
    var _S191 : vec4<f32> = saturate(vec4<f32>(18.37915992736816406f, 18.37915992736816406f, 18.37915992736816406f, 18.37915992736816406f) * r3_0.xyzw);
    r0_0.x = _S191.x;
    r0_0.y = _S191.y;
    r0_0.z = _S191.z;
    r0_0.w = _S191.w;
    var _S192 : vec4<f32> = saturate(r3_0.xyzw * vec4<f32>(4.59478998184204102f, 4.59478998184204102f, 4.59478998184204102f, 4.59478998184204102f) + vec4<f32>(-0.25f, -0.25f, -0.25f, -0.25f));
    r1_0.x = _S192.x;
    r1_0.y = _S192.y;
    r1_0.z = _S192.z;
    r1_0.w = _S192.w;
    var _S193 : vec4<f32> = r2_0.xyzw * r0_0.xyzw + r1_0.xyzw;
    r0_0.x = _S193.x;
    r0_0.y = _S193.y;
    r0_0.z = _S193.z;
    r0_0.w = _S193.w;
    var _S194 : vec4<f32> = cb0_0[i32(73)].xyzw * r0_0.xyzw;
    r0_0.x = _S194.x;
    r0_0.y = _S194.y;
    r0_0.z = _S194.z;
    r0_0.w = _S194.w;
    var _S195 : vec3<f32> = r0_0.xyz * r0_0.www;
    var o0_0 : vec4<f32>;
    o0_0.x = _S195.x;
    o0_0.y = _S195.y;
    o0_0.z = _S195.z;
    o0_0[i32(3)] = r0_0.w;
    return o0_0;
}

@compute
@workgroup_size(16, 16, 1)
fn imageMain(@builtin(global_invocation_id) dispatchThreadID_1 : vec3<u32>)
{
    var width_0 : u32 = u32(0);
    var height_0 : u32 = u32(0);
    {var dim = textureDimensions((outputTexture_0));((width_0)) = dim.x;((height_0)) = dim.y;};
    var _S196 : vec2<u32> = dispatchThreadID_1.xy;
    var color_0 : vec4<f32> = imageMain_0(_S196, vec2<i32>(i32(width_0), i32(height_0)));
    var _S197 : bool;
    if((dispatchThreadID_1.x) >= width_0)
    {
        _S197 = true;
    }
    else
    {
        _S197 = (dispatchThreadID_1.y) >= height_0;
    }
    if(_S197)
    {
        return;
    }
    textureStore((outputTexture_0), (_S196), (color_0));
    return;
}

